import { dataset as bruteForceDataset, DatasetSample } from './DetectBruteForceAttack';
import { dataset as inputValidationDataset } from './DetectInputValidation';
import { dataset as insecureAuthenticationDataset } from './InsecureAuthentication';
import { dataset as securityHeadersDataset } from './AnalyzeSecurityHeaders';

// Removing redundant data function.
function removeRedundantData(dataset: readonly DatasetSample[]): DatasetSample[] {
    const uniqueEntries: DatasetSample[] = [];
    const seenEntries: Set<string> = new Set();
    // let count0: number = 0;
    // let count1: number = 0;

    for (const entry of dataset) {
        const entryString = JSON.stringify(entry);
        if (!seenEntries.has(entryString)) {
            // if (entry.label === 0) count0++;
            // else count1++;
            uniqueEntries.push({ ...entry }); // copy ensures immutability
            seenEntries.add(entryString);
        }
    }
    // console.debug({ count0, count1, uniqueEntriesLen: uniqueEntries.length });

    return uniqueEntries;
}

export {
    DatasetSample, // type
    bruteForceDataset,
    inputValidationDataset,
    insecureAuthenticationDataset,
    securityHeadersDataset,
    removeRedundantData, // fn
};