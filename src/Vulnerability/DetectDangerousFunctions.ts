import * as fs from 'fs';

// Load the Esprima-parsed JSON file
const jsonFile = '/path/to/esprima_parsed_file.json';
const jsonData = fs.readFileSync(jsonFile, 'utf8');
const ast = JSON.parse(jsonData);

// Function names of dangerous functions to detect
const dangerousFunctions = ['eval', 'Function', 'setTimeout'];

// Traverse the AST recursively to find dangerous functions
function traverseAST(node: any, parent = null) {
    if (node.type === 'CallExpression') {
        const functionName = getFunctionName(node.callee);
        const location = node.loc;

        if (dangerousFunctions.includes(functionName)) {
            console.log('Dangerous function detected:');
            console.log('Function Name:', functionName);
            console.log('Line:', location.start.line);
            console.log('Column:', location.start.column);
            console.log('---');
        }
    }

    for (const key in node) {
        if (node[key] && typeof node[key] === 'object') {
            traverseAST(node[key], node);
        }
    }
}

// Get the name of the function from the CallExpression node
function getFunctionName(callee:any) {
    if (callee.type === 'Identifier') {
        return callee.name;
    } else if (callee.type === 'MemberExpression') {
        return getFunctionName(callee.property);
    } else {
        return '';
    }
}

// Start traversing the AST
traverseAST(ast);
