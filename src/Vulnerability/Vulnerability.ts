import {
    DatasetSample,

    bruteForceDataset,
    inputValidationDataset,
    insecureAuthenticationDataset,
    securityHeadersDataset,
} from "./DatasetUtils";

// Enumerates common types of vulnerabilities.
// Note: Defined as a 'read-only' frozen object to prevent modifications.
export const Vulnerability = Object.freeze({
    BruteForce: 0,
    InputValidation: 1,
    InsecureAuthentication: 2,
    SecurityHeaders: 3,
} as const);

export type Vulnerability = (typeof Vulnerability)[keyof typeof Vulnerability];

// Map `Vulnerability` values to their dataset samples.
export const toDatasetMap: { [key: number]: readonly DatasetSample[] } = Object.freeze({
    [Vulnerability.BruteForce]: bruteForceDataset,
    [Vulnerability.InputValidation]: inputValidationDataset,
    [Vulnerability.InsecureAuthentication]: insecureAuthenticationDataset,
    [Vulnerability.SecurityHeaders]: securityHeadersDataset,
} as const);

// Map `Vulnerability` values to their `toString` descriptions.
export const toStringMap: { [key: number]: string } = Object.freeze({
    [Vulnerability.BruteForce]: "Brute Force Attack",
    [Vulnerability.InputValidation]: "Input Validation",
    [Vulnerability.InsecureAuthentication]: "Insecure Authentication",
    [Vulnerability.SecurityHeaders]: "Security Headers",
} as const);

// Sanity check:
//
// Test with `stderr` redirected to `stdout` file descriptor (fd):
// $ rm -rf dist/ && npm run build && MODE='DEV' npm run start 2>&1
{
    const isSkipTest = true;

    const testShouldMatchEnumFields = () => {
        const vulnerabilities: Vulnerability[] = Object.values(
            Vulnerability
        ).filter((value): value is Vulnerability => typeof value === "number");

        vulnerabilities.forEach((kind: Vulnerability) => {
            if (toDatasetMap[kind] === undefined) {
                throw new Error(`Found unknown Vulnerability kind in 'toDatasetMap': '${kind}'.`);
            }

            if (toStringMap[kind] === undefined) {
                throw new Error(`Found unknown Vulnerability kind in 'toStringMap': '${kind}'.`);
            }
        });
    };

    if (!isSkipTest) {
        testShouldMatchEnumFields();
    }
}