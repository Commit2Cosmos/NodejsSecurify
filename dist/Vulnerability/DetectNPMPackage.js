"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const esprima_1 = require("esprima");
const path_1 = require("path");
const fs = __importStar(require("fs"));
function checkPackages(file) {
    const filePath = (0, path_1.resolve)(file);
    // Read the file content
    const fileContent = fs.readFileSync(filePath, 'utf8');
    // Parse the JavaScript code using Esprima
    const ast = (0, esprima_1.parseScript)(fileContent, { loc: true });
    // Traverse the AST to find require/import statements
    traverseAST(ast);
    function traverseAST(node) {
        var _a;
        // Check if the node is a CallExpression
        if (node.type === esprima_1.Syntax.CallExpression) {
            // Check if the CallExpression represents a require/import statement
            if (node.callee.type === esprima_1.Syntax.Identifier &&
                (node.callee.name === 'require' || node.callee.name === 'import')) {
                // Get the package name from the arguments of the require/import statement
                const packageName = (_a = node.arguments[0]) === null || _a === void 0 ? void 0 : _a.value;
                if (packageName) {
                    // Check if the package is up-to-date (example: comparing versions using package.json)
                    const isUpToDate = checkPackageVersion(packageName);
                    if (!isUpToDate) {
                        // Get the source location information of the require/import statement
                        const { line, column } = node.loc.start;
                        // Find the original source location using source maps (if available)
                        const originalSourceLocation = findOriginalSourceLocation(filePath, line, column);
                        // Log the error with location information
                        console.error(`Package '${packageName}' is not up-to-date.`);
                        console.error(`Error Location: Line ${originalSourceLocation.line}, Column ${originalSourceLocation.column}`);
                        console.error(`Function Name: ${originalSourceLocation.functionName}`);
                        console.error(`File: ${originalSourceLocation.file}`);
                    }
                }
            }
        }
        // Recursively traverse child nodes
        for (const key in node) {
            if (typeof node[key] === 'object' && node[key] !== null) {
                traverseAST(node[key]);
            }
        }
    }
    function checkPackageVersion(packageName) {
        // TODO: Implement package version checking logic (example: reading package.json)
        // Placeholder code that assumes package is always up-to-date
        return true;
    }
    function findOriginalSourceLocation(filePath, line, column) {
        // TODO: Implement source map logic to find the original source location
        // Placeholder code that assumes original location is the same as the provided location
        return {
            source: filePath,
            line,
            column,
            name: ''
        };
    }
}
// Usage example
const jsFilePath = '/path/to/file.js';
checkPackages(jsFilePath);
