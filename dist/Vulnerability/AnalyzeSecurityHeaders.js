"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.analyzeSecurityHeaders = void 0;
const natural_1 = require("natural");
// Example dataset (Replace this with your actual dataset)
const dataset = [
    {
        'code': `app.use((req, res, next) => {
            res.setHeader('X-Content-Type-Options', 'nosniff');
            next();
          });
          `,
        'label': 0
    },
    {
        'code': `app.use((req, res, next) => {
            res.setHeader('Cache-Control', 'public, max-age=3600');
            next();
          });
          `,
        'label': 1
    },
    {
        'code': `app.use((req, res, next) => {
            res.setHeader('X-Frame-Options', 'DENY');
            next();
          });
          `,
        'label': 0
    },
    {
        'code': `app.use((req, res, next) => {
            res.setHeader('Feature-Policy', "geolocation *");
            next();
          });
          `,
        'label': 1
    }, {
        'code': `app.use((req, res, next) => {
            res.setHeader('X-XSS-Protection', '1; mode=block');
            next();
          });
          `,
        'label': 0
    },
    {
        'code': `app.use((req, res, next) => {
            res.setHeader('Referrer-Policy', 'unsafe-url');
            next();
          });
          `,
        'label': 1
    }, {
        'code': `app.use((req, res, next) => {
            res.setHeader('Content-Security-Policy', "default-src 'self'");
            next();
          });
          `,
        'label': 0
    },
    {
        'code': `app.use((req, res, next) => {
            res.setHeader('Strict-Transport-Security', 'max-age=31536000');
            next();
          });
          `,
        'label': 1
    }, {
        'code': `app.use((req, res, next) => {
            res.setHeader('Strict-Transport-Security', 'max-age=31536000; includeSubDomains; preload');
            next();
          });
          `,
        'label': 0
    },
    {
        'code': `app.use((req, res, next) => {
            res.setHeader('Content-Security-Policy', "script-src 'self'");
            next();
          });
          `,
        'label': 1
    }, {
        'code': `app.use((req, res, next) => {
            res.setHeader('Referrer-Policy', 'same-origin');
            next();
          });
          `,
        'label': 0
    },
    {
        'code': `app.use((req, res, next) => {
            res.setHeader('X-XSS-Protection', '0');
            next();
          });
          `,
        'label': 1
    }, {
        'code': `app.use((req, res, next) => {
            res.setHeader('Feature-Policy', "geolocation 'self'; microphone 'self'");
            next();
          });
          `,
        'label': 0
    },
    {
        'code': `app.use((req, res, next) => {
            res.setHeader('X-Frame-Options', 'SAMEORIGIN');
            next();
          });
          `,
        'label': 1
    }, {
        'code': `app.use((req, res, next) => {
            res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');
            next();
          });
          `,
        'label': 0
    },
    {
        'code': `app.use((req, res, next) => {
            res.setHeader('X-Content-Type-Options', 'nope');
            next();
          });
          `,
        'label': 1
    }, {
        'code': `app.use((req, res, next) => {
            res.setHeader('Public-Key-Pins', 'pin-sha256="base64=="; max-age=5184000; includeSubDomains');
            next();
          });
          `,
        'label': 0
    },
    {
        'code': `app.use((req, res, next) => {
            res.setHeader('Public-Key-Pins', 'pin-sha256="invalid"; max-age=5184000');
            next();
          });
          `,
        'label': 1
    }, {
        'code': `app.use((req, res, next) => {
            res.setHeader('Expect-CT', 'enforce, max-age=2592000, report-uri="https://example.com/report-ct"');
            next();
          });
          `,
        'label': 0
    },
    {
        'code': `app.use((req, res, next) => {
            res.setHeader('Expect-CT', 'enforce');
            next();
          });
          `,
        'label': 1
    },
];
// removing repeated data
function removeRedundantData(dataset) {
    const uniqueEntries = [];
    const seenEntries = new Set();
    let count0 = 0;
    let count1 = 0;
    for (const entry of dataset) {
        const entryString = JSON.stringify(entry);
        if (!seenEntries.has(entryString)) {
            if (entry.label === 0)
                count0++;
            else
                count1++;
            uniqueEntries.push(entry);
            seenEntries.add(entryString);
        }
    }
    // console.log(count0, count1, uniqueEntries.length);
    return uniqueEntries;
}
// Function to detect vulnerability brute force attack in a new code snippet
function analyzeSecurityHeaders(code_snippet) {
    let detect = false;
    // Create a tokenizer
    const tokenizer = new natural_1.WordTokenizer();
    // Vectorize the new code snippet
    const tokenizedSnippet = tokenizer.tokenize(code_snippet);
    // Make prediction using the trained classifier
    if (tokenizedSnippet !== null) {
        // Prepare the data for training
        const cleanedDataset = removeRedundantData(dataset);
        const code_samples = cleanedDataset.map((sample) => sample.code);
        const labels = cleanedDataset.map((sample) => sample.label);
        // Vectorize the code samples using the tokenizer
        const tokenizedSamples = code_samples
            .map((code) => tokenizer.tokenize(code))
            .filter((tokens) => tokens !== null);
        // Train a Naive Bayes classifier
        const classifier = new natural_1.BayesClassifier();
        for (let i = 0; i < tokenizedSamples.length; i++) {
            classifier.addDocument(tokenizedSamples[i], labels[i].toString());
        }
        classifier.train();
        const prediction = classifier.classify(tokenizedSnippet);
        const result = parseInt(prediction);
        if (result) {
            detect = true;
            const result = "==> Code vulnerable to Brute force Attack in this file!!! ";
            console.log(result.red);
        }
    }
    if (!detect) {
        console.log("==> Code NOT vulnerable to Brute force Attack".green);
    }
}
exports.analyzeSecurityHeaders = analyzeSecurityHeaders;
