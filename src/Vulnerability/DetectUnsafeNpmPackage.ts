import * as fs from 'fs';
import * as util from 'util';
import colors from 'colors';
import { exec } from 'child_process';

// Modify checkVulnerablePackages to return a promise
export function checkVulnerablePackages(__dirname: string, logFilePath: string | Buffer): Promise<void> {
    return new Promise((resolve, reject) => {
        const auditCommand = 'npm audit --json';

        exec(auditCommand, (error, stdout, stderr) => {
            let logMessage: string = '';
            if (error) {
                logMessage += `Error executing npm audit: ${error.message}`;
                fs.appendFileSync(logFilePath, logMessage);
                return reject(error);
            }

            const auditReport = JSON.parse(stdout);
            const vulnerablePackages = auditReport.vulnerabilities;

            if (vulnerablePackages && Object.keys(vulnerablePackages).length > 0) {
                logMessage += colors.red('Vulnerable packages found:');
                for (const packageName in vulnerablePackages) {
                    logMessage += colors.red(`Package: ${packageName}`);
                    logMessage += colors.red(`Severity: ${vulnerablePackages[packageName].severity}`);
                    logMessage += colors.red(`Vulnerable Versions: ${vulnerablePackages[packageName].via}`);
                    logMessage += colors.red('---');
                }
            } else {
                logMessage += colors.green('No vulnerable packages found.');
            }
            // Append logMessage to the log file
            console.log(logMessage);
            fs.appendFileSync(logFilePath, logMessage);
            // Resolve the promise after the audit completes
            resolve();
        });
    });
}