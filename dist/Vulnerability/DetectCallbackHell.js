"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectCallbackHell = void 0;
const fs = __importStar(require("fs"));
const detectCallbackHell = function (filePath) {
    const parsedAST = (fs === null || fs === void 0 ? void 0 : fs.readFileSync(filePath, 'utf8'));
    // console.log(parsedAST);
    let errorLocations = [];
    // function traverseAST(node: any) {
    //     if (node.type === 'FunctionExpression' || node.type === 'FunctionDeclaration') {
    //         const functionBody = node.body.body;
    //         const functionIdentifier = node.id ? node.id.name : 'Anonymous Function';
    //         const functionStartLine = node.loc.start.line;
    //         let lastCallbackLine = null;
    //         for (let i = 0; i < functionBody.length; i++) {
    //             if (functionBody[i].type === 'ExpressionStatement') {
    //                 const expression = functionBody[i].expression;
    //                 if (expression.type === 'CallExpression' && expression.callee.type === 'Identifier') {
    //                     if (expression.arguments.some((arg: any) => isCallbackFunction(arg))) {
    //                         if (lastCallbackLine && lastCallbackLine === functionStartLine) {
    //                             const column = expression.callee.loc.start.column;
    //                             errorLocations.push({ line: lastCallbackLine, function: functionIdentifier, column: column });
    //                         }
    //                         lastCallbackLine = expression.callee.loc.end.line;
    //                     }
    //                 } else if (expression.type === 'CallExpression' && expression.callee.type === 'MemberExpression') {
    //                     if (expression.arguments.some((arg: any) => isCallbackFunction(arg))) {
    //                         if (lastCallbackLine && lastCallbackLine === functionStartLine) {
    //                             const column = expression.callee.property.loc.start.column;
    //                             errorLocations.push({ line: lastCallbackLine, function: functionIdentifier, column: column });
    //                         }
    //                         lastCallbackLine = expression.callee.property.loc.end.line;
    //                     }
    //                 }
    //             }
    //         }
    //     }
    //     for (const key in node) {
    //         if (typeof node[key] === 'object' && node[key] !== null) {
    //             traverseAST(node[key]);
    //         }
    //     }
    // }
    // function isCallbackFunction(node: any): boolean {
    //     return node.type === 'FunctionExpression' || node.type === 'FunctionDeclaration';
    // }
    // traverseAST(parsedAST);
    return errorLocations;
};
exports.detectCallbackHell = detectCallbackHell;
