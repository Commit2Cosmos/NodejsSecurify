import { exec } from 'child_process';
import * as fs from 'fs';
import * as util from 'util';

// Modify checkVulnerablePackages to return a promise
export function checkVulnerablePackages(__dirname: string, logFilePath: string | Buffer): Promise<void> {
  return new Promise((resolve, reject) => {
      const auditCommand = 'npm audit --json';

      exec(auditCommand, (error, stdout, stderr) => {
        let logMessage: string='';
          if (error) {
            logMessage+=`Error executing npm audit: ${error.message}`;
            console.log(logMessage);
            fs.appendFileSync(logFilePath, logMessage);
              return reject(error);
          }

          const auditReport = JSON.parse(stdout);
          const vulnerablePackages = auditReport.vulnerabilities;

          if (vulnerablePackages && Object.keys(vulnerablePackages).length > 0) {
              logMessage+='Vulnerable packages found:'.red;
              for (const packageName in vulnerablePackages) {
                  logMessage+=`Package: ${packageName}`.red;
                  logMessage+=`Severity: ${vulnerablePackages[packageName].severity}`.red;
                  logMessage+=`Vulnerable Versions: ${vulnerablePackages[packageName].via}`.red;
                  logMessage+='---'.red;
              }
          } else {
              logMessage+='No vulnerable packages found.'.green;
          }
          // Append logMessage to the log file
          console.log(logMessage);
          fs.appendFileSync(logFilePath, logMessage);
          // Resolve the promise after the audit completes
          resolve();
      });
  });
}