import * as fs from 'fs';

export const detectCallbackHell = function (filePath: string) {
    const parsedAST: any = JSON.parse(fs.readFileSync(filePath, 'utf8'));
    let errorLocations: { line: number, function: string, column: number }[] = [];

    function traverseAST(node: any) {
        if (node.type === 'FunctionExpression' || node.type === 'FunctionDeclaration') {
            const functionBody = node.body.body;
            const functionIdentifier = node.id ? node.id.name : 'Anonymous Function';
            const functionStartLine = node.loc.start.line;

            let lastCallbackLine = null;

            for (let i = 0; i < functionBody.length; i++) {
                if (functionBody[i].type === 'ExpressionStatement') {
                    const expression = functionBody[i].expression;
                    if (expression.type === 'CallExpression' && expression.callee.type === 'Identifier') {
                        if (expression.arguments.some((arg: any) => isCallbackFunction(arg))) {
                            if (lastCallbackLine && lastCallbackLine === functionStartLine) {
                                const column = expression.callee.loc.start.column;
                                errorLocations.push({ line: lastCallbackLine, function: functionIdentifier, column: column });
                            }
                            lastCallbackLine = expression.callee.loc.end.line;
                        }
                    } else if (expression.type === 'CallExpression' && expression.callee.type === 'MemberExpression') {
                        if (expression.arguments.some((arg: any) => isCallbackFunction(arg))) {
                            if (lastCallbackLine && lastCallbackLine === functionStartLine) {
                                const column = expression.callee.property.loc.start.column;
                                errorLocations.push({ line: lastCallbackLine, function: functionIdentifier, column: column });
                            }
                            lastCallbackLine = expression.callee.property.loc.end.line;
                        }
                    }
                }
            }
        }

        for (const key in node) {
            if (typeof node[key] === 'object' && node[key] !== null) {
                traverseAST(node[key]);
            }
        }
    }

    function isCallbackFunction(node: any): boolean {
        return node.type === 'FunctionExpression' || node.type === 'FunctionDeclaration';
    }

    traverseAST(parsedAST);
    return errorLocations;
}