"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectBruteForceVulnerability = void 0;
function detectBruteForceVulnerability(ast) {
    const vulnerableEndpoints = [];
    function traverseAST(node) {
        if (node.type === 'FunctionDeclaration') {
            const functionNode = node;
            const functionName = functionNode.id.name;
            const functionParams = functionNode.params.map((param) => param.name);
            const functionBody = functionNode.body.body;
            // Look for a loop in the function body
            const hasLoop = functionBody.some((item) => item.type === 'WhileStatement' || item.type === 'ForStatement');
            // Check if the function contains user input (such as username or password)
            const hasUserInput = functionParams.some((paramName) => ['username', 'password'].includes(paramName));
            // Check if the function contains a response indicating a failed login attempt
            const hasFailedLoginResponse = functionBody.some((item) => {
                if (item.type === 'ReturnStatement' && item.argument && item.argument.type === 'Literal') {
                    const errorMessage = item.argument.value;
                    return errorMessage.includes('invalid');
                }
                return false;
            });
            // If the function has a loop and contains user input and a failed login response, it might be vulnerable
            if (hasLoop && hasUserInput && hasFailedLoginResponse) {
                vulnerableEndpoints.push(functionName);
            }
        }
        for (const key in node) {
            if (node.hasOwnProperty(key)) {
                const child = node[key];
                if (typeof child === 'object' && child !== null) {
                    if (Array.isArray(child)) {
                        child.forEach(traverseAST);
                    }
                    else {
                        traverseAST(child);
                    }
                }
            }
        }
    }
    traverseAST(ast);
    if (vulnerableEndpoints.length > 0) {
        console.log('==> Potential brute force attack vulnerability detected in the following endpoints:'.red);
        console.log(vulnerableEndpoints);
    }
    else {
        console.log('==> No potential brute force attack vulnerabilities detected.'.green);
    }
}
exports.detectBruteForceVulnerability = detectBruteForceVulnerability;
