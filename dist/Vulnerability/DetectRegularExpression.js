"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsonfile = __importStar(require("jsonfile"));
// Function to detect ReDoS in a parsed JavaScript file
function detectReDoS(parsedFile) {
    const regexNodes = [];
    // Traverse the parsed file to find regular expression nodes
    function traverseNode(node) {
        if (node.type === 'Literal' && typeof node.value === 'string') {
            try {
                new RegExp(node.value);
            }
            catch (error) {
                regexNodes.push(node);
            }
        }
        // Recursively traverse child nodes
        for (const key in node) {
            if (typeof node[key] === 'object' && node[key] !== null) {
                traverseNode(node[key]);
            }
        }
    }
    // Start traversing the parsed file
    traverseNode(parsedFile);
    // Print information about ReDoS instances
    regexNodes.forEach((node, index) => {
        var _a;
        const { line, column } = ((_a = node.loc) === null || _a === void 0 ? void 0 : _a.start) || { line: undefined, column: undefined };
        console.log(`ReDoS detected at line ${line}, column ${column}`);
    });
}
// Read and parse the .json file containing the parsed JavaScript
const filePath = 'parsedFile.json';
jsonfile.readFile(filePath, (err, parsedFile) => {
    if (err) {
        console.error('Error reading parsed file:', err);
        return;
    }
    detectReDoS(parsedFile);
});
