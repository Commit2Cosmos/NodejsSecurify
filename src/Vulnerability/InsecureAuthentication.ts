import { parseCSV } from '../../datasets/parsingCSVData';
import { readFileSync } from "node:fs"
import path from 'node:path';


// Parsing dataset from CSV
const csv_data = readFileSync(path.join(path.resolve(),"datasets/insecureAuthenticationDataset.csv"), { encoding: "utf8" });
const dataset = parseCSV(csv_data)

export {dataset};

// Example dataset (Replace this with your actual dataset) SNYK
// Certainly, here are 10 more examples of insecure authentication practices in Node.js applications:

// DONE 1. **Hardcoded Credentials**: Storing credentials (such as usernames and passwords) directly in the source code, making them accessible to anyone with access to the codebase.

// DONE 2. **Weak Passwords**: Allowing users to set weak passwords that are easily guessable or crackable, such as "password123" or "admin123".

// DONE 3. **No Password Hashing**: Storing passwords in plain text instead of securely hashing them using algorithms like bcrypt or Argon2.

// DONE 6. **Insecure Session Management**: Using insecure or predictable session IDs, not expiring sessions properly, or not using HTTPS for secure transmission of session data.

// DONE 8. **Insecure Token Storage**: Storing authentication tokens in insecure locations, such as local storage, making them susceptible to theft through cross-site scripting (XSS) attacks.

// DONE 10. **Weak JWT (JSON Web Token) Security**: Using weak algorithms or not signing JWTs properly, leading to token forgery or tampering.
