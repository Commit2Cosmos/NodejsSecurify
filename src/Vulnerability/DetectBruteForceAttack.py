from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Example dataset (Replace this with your actual dataset)
dataset = [
  {
    'code': 'function add(a, b) { return a + b; }',
    'label': 0,
  },
  {
    'code': 'var username = "admin"; var password = "admin123";',
    'label': 1,
  },
  {
    'code': 'function login(username, password) { if (password === "password") { return true; } else { return false; } }',
    'label': 1,
  },
  {
    'code': 'function login(username, password) { if (password === "1q2w3e4r") { return true; } else { return false; } }',
    'label': 1,
  },
  {
    'code': 'function login(username, password) { if (username === "admin" && password === "pa$$w0rd") { return true; } else { return false; } }',
    'label': 1,
  },
  {
    'code': 'function login(username, password) { if (isValidUser(username) && isValidPassword(password)) { return true; } else { return false; } }',
    'label': 0,
  },
  {
    'code': 'const users = ["user1", "user2", "user3"]; function login(username, password) { if (users.includes(username) && password === "password") { return true; } else { return false; } }',
    'label': 1,
  },
  {
    'code': 'function login(username, password) { if (password === "admin123" || password === "password" || password === "qwerty") { return true; } else { return false; } }',
    'label': 1,
  },
  {
    'code': 'function login(username, password) { if (isValidCredentials(username, password)) { return true; } else { return false; } }',
    'label': 0,
  },
  {
    'code': 'function login(username, password) { if (username === "admin" && password === "admin@123") { return true; } else { return false; } }',
    'label': 0,
  },
];


# Prepare the data for training
code_samples = [sample['code'] for sample in dataset]
labels = [sample['label'] for sample in dataset]

# Vectorize the code samples using CountVectorizer
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(code_samples)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.2, random_state=42)

# Train a Naive Bayes classifier
clf = MultinomialNB()
clf.fit(X_train, y_train)

# Make predictions on the test set
y_pred = clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")

# Function to detect vulnerability brute force attack in a new code snippet
def detectCallBackHell(code_snippet):
    # Vectorize the new code snippet
    X_new = vectorizer.transform([code_snippet])

    # Make prediction using the trained classifier
    prediction = clf.predict(X_new)[0]

    return prediction

# Test the function with some code snippets
code_snippet_1 = 'function login(username, password) { if (password === "12345") { return true; } else { return false; } }'
code_snippet_2 = 'var username = "user"; var password = "securepassword";'
print(detectCallBackHell(code_snippet_1))  # Output: 1 (Vulnerable)
print(detectCallBackHell(code_snippet_2))  # Output: 0 (Non-vulnerable)