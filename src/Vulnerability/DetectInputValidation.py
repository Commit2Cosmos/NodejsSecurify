import esprima
import json
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction import DictVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Example dataset (replace this with your labeled dataset)
data = [
    {
        "code": "const inputValue = userProvidedValue;",
        "is_vulnerable": 1
    },
    {
        "code": "const sanitizedValue = sanitizeInput(userProvidedValue);",
        "is_vulnerable": 0
    },
    # Add more data points here
]

# Step 1: Parse the JavaScript code into an abstract syntax tree (AST)
def parse_code(code):
    return esprima.parseScript(code, loc=True)

# Step 2: Extract relevant features from the AST
def extract_features(ast):
    # You can customize this function to extract relevant features from the AST
    return {"node_count": len(ast.body)}

# Preprocess the data
def preprocess_data(data):
    parsed_data = []
    for item in data:
        ast = parse_code(item["code"])
        features = extract_features(ast)
        parsed_data.append({"features": features, "is_vulnerable": item["is_vulnerable"]})
    return parsed_data

# Convert data to pandas DataFrame
data_df = pd.DataFrame(preprocess_data(data))

# Step 3: Create labels (1 for lack of input validation, 0 for properly validated/sanitized)
X = data_df["features"].to_list()
y = data_df["is_vulnerable"].to_list()

# Step 4: Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Train a machine learning algorithm (Random Forest) on the training data
vectorizer = DictVectorizer()
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_vec, y_train)

# Step 6: Evaluate the model on the testing data
y_pred = model.predict(X_test_vec)
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f"Accuracy: {accuracy}")
print("Classification Report:")
print(report)
