export function detectDangerousFunctions(node: any, fileContent: string) {
    const nodeTokens: any[] = node.tokens;
    let detect: boolean = false;
    const dangerousFuncArrayWithDot: string[] = ["setTimeout", "RegExp", "parsedInt", "parsedFloat", "getElementById", "outerHTML", "postMessage", "setRequestHeader", "ExecuteSql", "innerHTML", "eval", "WebSocket", "document.write", "document.evaluate", "window.location", "document.cookie", "sessionStorage.setItem", "JSON.parse", "element.setAttribute"];

    const fileContentArray: string[] = fileContent.split("\r\n");
    let location: number = 0;
    for (let nodeObj of fileContentArray) {
        location++;
        for (let nodeDangerObj of dangerousFuncArrayWithDot) {
            if (nodeObj.includes(nodeDangerObj)) {
                if (!detect) {
                    console.log("==> Following dangerous function detected: ".red);
                    detect = true;
                }
                let value: string = nodeDangerObj;
                switch (nodeDangerObj) {
                    case "parsedInt":
                        value += " detected at line: " + location + " Ensure: Always specify the radix (base) to avoid unexpected results";
                        break;
                    case "parsedFloat":
                        value += " detected at line: " + location + " Ensure: Always specify the radix (base) to avoid unexpected results";
                        break;
                    case "RegExp":
                        value += " detected at line: " + location + " Ensure: Regular expression to match only letters";
                        break;
                    case "setTimeout":
                        value += " detected at line: " + location + " Ensure: Remember to clear the interval when it's no longer needed: clearTimeout(timerId);";
                        break;
                    case "getElementById":
                        value += " detected at line: " + location + " Ensure: Regular expression to match only letters";
                        break;
                    case "getElementById":
                        value += " detected at line: " + location + " Ensure: Regular expression to match only letters";
                        break;
                    case "eval":
                        value += " detected at line: " + location + " Avoid this function";
                        break;
                    case "innerHTML":
                        value += " detected at line: " + location + " Ensure: It does'nt accepts script tag, can cause XSS Attack";
                        break;
                    case "outerHTML":
                        value += " detected at line: " + location + " Ensure: It does'nt accepts script tag, can cause XSS Attack";
                        break;
                    case "document.write":
                        value += " detected at line: " + location + " Ensure: Avoid using it to prevent DOM XSS attack";
                        break;
                    case "document.evaluate":
                        value += " detected at line: " + location + " Ensure: Avoid using it to prevent Client-side XPath injection";
                        break;
                    case "window.location":
                        value += " detected at line: " + location + " Ensure:  Avoid usingit to navigate to URLs provided by users, can lead to 'Open redirection'";
                        break;
                    case "window.open":
                        value += " detected at line: " + location + " Ensure: Can lead to 'Open redirection'";
                        break;
                    case "document.cookie":
                        value += " detected at line: " + location + " Ensure: Santize or encode cookie data, as it can lead to Cookie manipulation";
                        break;
                    case "sessionStorage.setItem":
                        value += " detected at line: " + location + " Ensure: Sanitize and limit data, Can lead to HTML5-storage manipulation";
                        break;
                    case "JSON.parse":
                        value += " detected at line: " + location + " Ensure: Be cautious about the source of the JSON data, Can lead to  Client-side JSON injection";
                        break;
                    case "element.setAttribute":
                        value += " detected at line: " + location + " Ensure:  Better to use methods such as addEventListener, as it can lead to DOM-data manipulation (XSS)";
                        break;
                    default:
                        break;
                }
                console.log("> " + value.red);
            }
        }
    }
    if (!detect) console.log("==> No dangerous function detected".green);
    else console.log("=====> Ignore above errors if you already made changes to your code <=====".yellow);

}